Assignment 3: NoSQL-CRUD

1.      Write a MongoDB query to create an INVOICE database and collections (CUSTOMER, PRODUCT) and its corresponding documents.

test> use INVOICE
switched to db INVOICE

INVOICE> db.createCollection("CUSTOMER")
{ ok: 1 }
INVOICE> db.createCollection("PRODUCTS")
{ ok: 1 }

INVOICE> show collections;
CUSTOMER
PRODUCT


//CUSTOMER DOCUMENTS


INVOICE> db.CUSTOMER.insertMany([{c_id:"001",name:"sreya",address:"vadasshery",city:"thrissur"},{c_id:"002",name:"kuttu",address:"pallipozhil",city:"vayanad"}]) 
{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId("64817329aa134a7ea4161045"),
    '1': ObjectId("64817329aa134a7ea4161046")
  }
}
INVOICE> db.CUSTOMER.insertMany([{c_id:"003",name:"neethu",address:"pulliyel",city:"calicut"},{c_id:"004",name:"neenu",address:"thekkepulliyeal",city:"kozhikode"}])
{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId("648173daaa134a7ea4161047"),
    '1': ObjectId("648173daaa134a7ea4161048")
  }
}

//PRODUCT DOCUMENTS

INVOICE> db.PRODUCT.insertMany([{p_id:"01",p_name:"pen",price:"10"},{p_id:"02",p_name:"notebook",price:"50"},{p_id:"03",p_name:"pencil",price:"5"},{p_id:"04",p_name:"box",price:"65"}])
{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId("64817802aa134a7ea4161049"),
    '1': ObjectId("64817802aa134a7ea416104a"),
    '2': ObjectId("64817802aa134a7ea416104b"),
    '3': ObjectId("64817802aa134a7ea416104c")
  }
}


**************************************************************************************************************************************************
2.      Write a MongoDB query to find all documents from the collection CUSTOMER

//customer documents

INVOICE> db.CUSTOMER.find()
[
  {
    _id: ObjectId("64817329aa134a7ea4161045"),
    c_id: '001',
    name: 'sreya',
    address: 'vadasshery',
    city: 'thrissur'
  },
  {
    _id: ObjectId("64817329aa134a7ea4161046"),
    c_id: '002',
    name: 'kuttu',
    address: 'pallipozhil',
    city: 'vayanad'
  },
  {
    _id: ObjectId("648173daaa134a7ea4161047"),
    c_id: '003',
    name: 'neethu',
    address: 'pulliyel',
    city: 'calicut'
  },
  {
    _id: ObjectId("648173daaa134a7ea4161048"),
    c_id: '004',
    name: 'neenu',
    address: 'thekkepulliyeal',
    city: 'kozhikode'
  }
]


//product documents


INVOICE> db.PRODUCT.find()
[
  {
    _id: ObjectId("64817802aa134a7ea4161049"),
    p_id: '01',
    p_name: 'pen',
    price: '10'
  },
  {
    _id: ObjectId("64817802aa134a7ea416104a"),
    p_id: '02',
    p_name: 'notebook',
    price: '50'
  },
  {
    _id: ObjectId("64817802aa134a7ea416104b"),
    p_id: '03',
    p_name: 'pencil',
    price: '5'
  },
  {
    _id: ObjectId("64817802aa134a7ea416104c"),
    p_id: '04',
    p_name: 'box',
    price: '65'
  }
]


**********************************************************************************************************************************************

3.      Write a MongoDB query to update the city in the collection CUSTOMER.


INVOICE> db.CUSTOMER.update({city:"calicut"},{$set:{city:"kozhikode"}})
DeprecationWarning: Collection.update() is deprecated. Use updateOne, updateMany, or bulkWrite.
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}

INVOICE> db.CUSTOMER.find({name:"neethu"}).pretty()
[
  {
    _id: ObjectId("648173daaa134a7ea4161047"),
    c_id: '003',
    name: 'neethu',
    address: 'pulliyel',
    city: 'kozhikode'
  }
]


*********************************************************************************************************************************



4.      Write a MongoDB query to delete the first matched document whose city is “Calicut”.


INVOICE> db.CUSTOMER.insertOne({c_id:"005",name:"meera",address:"punoor",city:"calicut"})
{
  acknowledged: true,
  insertedId: ObjectId("64817c5baa134a7ea416104d")
}
INVOICE> db.CUSTOMER.deleteOne({c_id:"005"})
{ acknowledged: true, deletedCount: 1 }
INVOICE> db.CUSTOMER.find({name:"meera"}).pretty()



